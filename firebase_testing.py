# Thanks to github.com/mdrkb for this template. I could not find documentation for this
from xml.dom import ValidationErr
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db
import json

# Fetch the service account key JSON file contents
cred = credentials.Certificate('firebase-keys.json')
# Initialize the app with a service account, granting admin privileges
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://labyrinthofdaedalus-79a5f-default-rtdb.firebaseio.com/'
})


# initalize
def init():
    with open("Firebase/init.json") as file:
        data = json.load(file)

    ref = db.reference('/')
    ref.set(data)

class Firebase:
    def __init__(self) -> None:
        pass

    # note: if there is a room with the same ID, it will overide it
    # if force=True, it will overide, otherwise it will error
    def set_room(self, data, force=False):
        if type(data) == dict:
            id = data["id"]
            new = db.reference('/rooms/' + str(id))
            if force == True:
                new.set(data)
            else:
                if new.get():
                    raise ValidationErr("there is already a room with this id")
                else:
                    new.set(data)
        else:
            raise TypeError("please serialize the data into a dict")
    
    # literally just the same as set room, but forces overide
    def save_room(self, data):
        self.set_room(data, True)
    


database = Firebase()
with open("Rooms/room_example.json") as f:
    p = json.load(f)
    

database.set_room(p)
# init()

"""

# Save data
ref = db.reference('/')
ref.set(
    {
    'boxes': 
            {
                'box001': {
                    'color': 'red',
                    'width': 1,
                    'height': 3,
                    'length': 2
                },
                'box002': {
                    'color': 'green',
                    'width': 1,
                    'height': 2,
                    'length': 3
                },
                'box003': {
                    'color': 'yellow',
                    'width': 3,
                    'height': 2,
                    'length': 1
                },
            }
    }
)








# Update data
ref = db.reference('boxes')
box_ref = ref.child('box001')
box_ref.update({
    'color': 'blue'
})

# Multi-path update data
ref = db.reference('boxes')
ref.update({
    'box001/color': 'red',
    'box002/color': 'blue'
})

# Save lists of data
ref = db.reference('boxes')
ref.push({
    'color': 'purple',
    'width': 7,
    'height': 8,
    'length': 6
})

# Get the Unique Key Generated by push()
ref = db.reference('boxes')
new_box_ref = ref.push({
    'color': 'purple',
    'width': 7,
    'height': 8,
    'length': 6
})
box_id = new_box_ref.key
print(box_id)

# Retrieving data
ref = db.reference('boxes')
print(ref.get())

# Querying Data

# Ordering by a specified child key
ref = db.reference('boxes')
snapshot = ref.order_by_child('height').get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

# Ordering by key
ref = db.reference('boxes')
snapshot = ref.order_by_key().get()
print(snapshot)

# Ordering by value
ref = db.reference('/')
ref.set(
    {
        "weights": {
            "person001" : 60,
            "person002" : 65,
            "person003" : 80,
            "person004" : 55,
            "person005" : 72
        }
    }
)
ref = db.reference('weights')
snapshot = ref.order_by_value().get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

# Limit Queries
ref = db.reference('boxes')
snapshot = ref.order_by_child('color').limit_to_last(2).get()
for key in snapshot:
    print(key)

snapshot = ref.order_by_child('color').limit_to_last(3).get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

weights_ref = db.reference('weights')
snapshot = weights_ref.order_by_value().limit_to_last(3).get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

# Range Queries
snapshot = ref.order_by_child('color').start_at('r').get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

ref = db.reference('boxes')
snapshot = ref.order_by_key().end_at('w').get()
for key in snapshot:
    print(key)

ref = db.reference('boxes')
snapshot = ref.order_by_key().start_at('g').end_at(u'n\uf8ff').get()
for key in snapshot:
    print(key)

ref = db.reference('boxes')
snapshot = ref.order_by_child('length').equal_to(3).get()
for key in snapshot:
    print(key)
    """